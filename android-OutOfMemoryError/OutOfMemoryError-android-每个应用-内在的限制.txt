http://www.cnblogs.com/qiengo/archive/2012/04/25/2468372.html

Android框架强制每个进程的24 MB内存限制。
在一些旧的设备，如在G1，限制为16 MB 更低，更重要的是，
由位图使用的内存限制。
处理图像的应用程序，它是很容易达到此限制，
并获得与OOM 异常死亡 的过程：

E / dalvikvm堆（12517）：1048576字节外部分配这个 过程中过大的E / GraphicsJNI（12517）： 
VM将不会让我们分配1048576字节 / AndroidRuntime（12517）：
关闭VM / dalvikvm（12517）：
主题ID = 1：
线程未捕获的异常退出（集团= 0x4001d7f0 ） E / AndroidRuntime（12517）：
致命异常：主要 电子/ AndroidRuntime（12517）：java.lang.OutOfMemoryError：
位图的大小超过VM的预算 ，这个限制是低得离谱 。

设备，像512MB的物理RAM的Nexus之一，
设置每个进程的前台活动只有5％的RAM的内存限制是一个愚蠢的错误 。
但无论如何，事情是如何和我们生活-即找到如何解决它。

远远超过限制的内存分配方式有两种 ：

1）一种方法是从本机代码分配内存 。
使用NDK（本地开发工具包）和JNI，
它可能从C级（如的malloc / free或新建/删除）分配内存，
这样的分配是不计入对24 MB的限制 。
这是真的，从本机代码分配内存是为从Java方便，
但它可以被用来存储在RAM中的数据（即使图像数据）的一些大金额 。

2）另一种方式，其中的作品以及图像的，
是使用OpenGL的纹理-纹理内存不计入限制 ，
要查看您的应用程序确实分配多少内存可以
使用android.os.Debug.getNativeHeapAllocatedSize（ ），
可以使用上面介绍的两种技术的Nexus之一，
我可以轻松地为一个单一的前台进程分配300MB - 10倍以上的默认24 MB的限制 ，
从上面来看使用navtive代码分配内存是不在24MB的限制内的
（开放的GL的质地也是使用navtive代码分配内存的） 。