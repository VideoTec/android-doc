http://tech.meituan.com/Android_unit_test.html

单元测试并不是一个能直接产生回报的工程，
它的运行以及覆盖率也不能直接提升代码质量，
但其带来的代码控制力能够大幅度降低大规模协同开发的风险。

现在的商业App开发都是大型团队协作开发，不断会有新人加入，
无论新人是刚入行的应届生还是工作多年，
在代码存在一定业务耦合度的时候，修改代码就有一定风险，
可能会影响之前比较隐蔽的业务逻辑，或者是丢失曾经的补丁，
如果有高覆盖率的单元测试工程，就能很快定位到新增代码对现有项目的影响，
与QA验收不同，这种影响是代码级的。

在本文所设计的单元测试流程中，
单元测试的case和具体页面的具体业务流程以及该业务的代码逻辑紧密联系，
单元测试如同技术文档一般，能够体现出一个业务逻辑运行了多少函数，需要注意什么样的条件。
这是一种新人了解业务流程、对业务进行代码级别融入的好办法，
看一下以前的单元测试case，
就能知道与该case对应的那个页面上的那个业务逻辑会执行多少函数，
以及这些函数可能出现的结果。