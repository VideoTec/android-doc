dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.1.1'
}

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/local_packages.html
配置一个外部的jar包依赖，你需要在compile配置中添加一个依赖
dependencies {
    compile files('libs/foo.jar')
}

android {
    ...
}
注意： 
该 dependencies 的 DSL标签 是标准Gradle API中的一部分,所以它不属于android标签.
这个compile配置将被用于编译main application.
它里面的所有依赖都会被添加到编译classpath中,
同时也会被打包最终的APK.

以下是添加依赖时可能用到的其他一些配置选项:

compile               主程序
androidTestCompile    测试程序
debugCompile          debug构建类型
releaseCompile        release构建类型

因为不可能去构建一个没有关联任何构建类型的APK,
APK默认配置了两个或两个以上的编译配置：
compile和
<buildtype>Compile.

创建一个新的构建类型将会自动创建一个基于该名字的新配置.

对于debug版本需要使用一个自定义库(为了反馈实例化的崩溃信息等),但发布时不需要，
或者它们依赖于同一个库的不同版本时会非常有用.

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/remote_artifacts.html
Gradle支持从Maven或者Ivy仓库中拉取文件。

首先必须将仓库添加到列表中，然后必须在依赖中声明Maven或者Ivy声明的文件。

repositories {
    mavenCentral()
}


dependencies {
    compile 'com.google.guava:guava:11.0.2'
}

android {
    ...
}

注意：
mavenCentral()是指定仓库URL的简单方法。
Gradle支持远程和本地仓库。

注意：
Gradle会遵循依赖关系的传递性。
这意味着如果一个依赖本身依赖于其它东西，
这些东西也会一并被拉取回来。

更多关于设置依赖关系的信息，请参考Gradle用户指南和DSL文档。

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/multi_project_setup.html
多项目设置

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/referencing_a_library.html
引用一个库工程
引用一个库就跟引用其他工程一样：

dependencies {
    compile project(':libraries:lib1')
    compile project(':libraries:lib2')
}

注意: 
如果你有多个库，那么这个顺序很重要，
这就好像旧的构建系统，
在project.properties文件中的依赖顺序一样重要

另一个示例：

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile project(':mylibrary')
}