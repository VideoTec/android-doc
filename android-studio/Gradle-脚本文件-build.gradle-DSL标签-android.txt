android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.xueyie.firstproject"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/031_simple_build_files.html

android { ... }配置了所有android构建的参数.
也是Android DSL的入口点. 
默认情况下，只有编译的 target 和 build-tools 版本是必须的.
就是 compileSdkVersion 和 buildtoolsVersion 两个属性.
 
编译的 target 属性相当于在老的构建系统中project.properties中的target属性.
这个新属性和老的target属性一样可以指定一个int(api等级)或者string类型的值.

重要： 
你只能使用 android 插件. 如果同时使用 java 插件，会导致构建错误.
即：
apply plugin: 'com.android.application'
apply plugin: 'java'

注意： 
1）你还需要添加local.properties文件，使用sdk.dir属性，来设置已经存在的SDK路径.
2）另外，你也可以设置环境变量ANDROID_HOME.
这两种方式没有什么区别,可以根据你自己的喜好来选择一种.

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/manifest_entries.html
通过DSL可以配置下面的 manifest 属性
minSdkVersion
targetSdkVersion
versionCode
versionName
applicationId(有效的包名--查看ApplicationId versus PackageName了解更多信息)
Package Name for the test application
Instrumentation test runner

在android元素中的defaultConfig定义了所有的配置

http://flyouting.gitbooks.io/gradle-plugin-user-guide-cn/content/build_types.html
构建类型
默认情况下，Android插件会自动建立构建应用程序的debug和release版本的工程. 
它们的区别主要是能否在一个安全(non dev)的设备上调试,以及APK是如何签名.

debug   版本使用了通用的 name/password 对自动创建的密钥证书进行签名(为了防止在构建过程中出现认证请求).
release 版本在构建过程中不进行签名，而是需要后面再进行签名.

这个配置是通过一个叫BuildType对象来完成的.默认情况下,
两个实例会被创建,一个debug和一个release

Android插件允许像创建其他构建类型那样来自定义这两个实例.可以在buildTypes的DSL容器中完成:

android {
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        jnidebug.initWith(buildTypes.debug)
        jnidebug {
            packageNameSuffix ".jnidebug"
            jnidebugBuild true
        }
    }
}

上面的代码片段实现了以下功能：

配置默认的debug构建类型:
设置包名为<app appliationId>.debug,以便能够在同一个设备上安装debug和release版本的apk
创建了名为jnidebug的新BuildType,并且配置为是debug构建类型的一个副本.
继续配置jnidebug，可以构建JNI组件,而且增加了一个不同的包名后缀.