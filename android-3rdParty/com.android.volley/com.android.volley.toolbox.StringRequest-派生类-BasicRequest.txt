    private HttpListener<String> listener;
    private HttpEntity entity;              org.apache.http.HttpEntity

    ³É¶Ô»º´æ

package com.feinno.beside.volleyclient;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.apache.http.HttpEntity;

import android.util.Log;

import com.android.volley.AuthFailureError;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.toolbox.StringRequest;
import com.feinno.beside.json.response.GenericResponse;
import com.feinno.beside.utils.log.LogSystem;
import com.google.gson.Gson;

public class BasicRequest extends StringRequest {
    private final String tag = "BasicRequest";
    private HttpListener<String> listener;
    private HttpEntity entity;
    private String contentType;
    private final int READ_TIME_OUT_MIS = 60 * 1000;
    private final int RETRY_COUNT = 1;

    public BasicRequest(String url, HttpEntity entity, String contentType, HttpListener<String> listener) {
        super(Method.POST, url, listener, listener);
        this.listener = listener;
        this.entity = entity;
        this.contentType = contentType;
        setRetryPolicy(new DefaultRetryPolicy(READ_TIME_OUT_MIS, RETRY_COUNT, 1f));
    }

    @Override
    protected void deliverResponse(String response) {
    	LogSystem.d(tag, "response ==== >"+response);
        try{
            GenericResponse res = new Gson().fromJson(response, GenericResponse.class);
            if (res.status == 200) {
                listener.onResponse(response);
            } else {
            	LogSystem.e(tag, "response ==== >"+response);
                listener.onFailedResposnse(res.status);
            }
        }catch(Throwable e){
        	LogSystem.e(tag, "deliverResponse throwable",e);
        	listener.onFailedResposnse(500);
        }

    }

    @Override
    public byte[] getBody() throws AuthFailureError {
        HttpEntity httpEntity = entity;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try {
            httpEntity.writeTo(bos);
            return bos.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
            Log.e(tag, e.getMessage());
        }
        return null;
    }

    @Override
    public String getBodyContentType() {
        return contentType;
    }

}
