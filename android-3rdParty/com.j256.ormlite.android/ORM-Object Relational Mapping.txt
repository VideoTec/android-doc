------------------------------------------------------------------------------------------
https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1%E5%85%B3%E7%B3%BB%E6%98%A0%E5%B0%84
------------------------------------------------------------------------------------------

对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），
是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。
从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。

如今已有很多免费和收费的ORM产品，
而有些程序员更倾向于创建自己的ORM工具。

面向对象是从软件工程基本原则（如耦合、聚合、封装）的基础上发展起来的，
而关系数据库则是从数学理论发展而来的，两套理论存在显著的区别。
为了解决这个不匹配的现象，对象关系映射技术应运而生。

简单的说：
ORM相当于中继数据。具体到产品上，
例如下边的ADO.NET Entity Framework。
DLINQ中实体类的属性[Table]就算是一种中继数据。

对象关系映射成功运用在不同的面向对象持久层产品中，如：
Torque，
OJB，
Hibernate，
TopLink，
Castor
JDO，
TJDO，
Active Record，
NHibernate，
ADO.NET Entity Framework 等。

------------------------------------------------------------------------------------------
http://baike.baidu.com/view/197951.htm
------------------------------------------------------------------------------------------
对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），
是一种程序技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。
从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。

------------------------------------------------------------------------------------------
http://www.pureweber.com/article/orm/
------------------------------------------------------------------------------------------
ORM即Object/Relation Mapping的简写，一般称作“对象关系映射”，在Web开发中最常出没于和关系型数据库交互的地方。
接口、中间件、库、包，你都可以这么称呼它。

我们可以结合PHP和MySQL，从ORM的四个核心理念来认识它：

1）简单：
ORM以最基本的形式建模数据。
比如ORM会将MySQL的一张表映射成一个PHP类（模型），表的字段就是这个类的成员变量

2）精确：
ORM使所有的MySQL数据表都按照统一的标准精确地映射成PHP类，
使系统在代码层面保持准确统一

3）易懂：
ORM使数据库结构文档化。
比如MySQL数据库就被ORM转换为了PHP程序员可以读懂的PHP类，
PHP程序员可以只把注意力放在他擅长的PHP层面（当然能够熟练掌握MySQL更好）

4）易用：
ORM的避免了不规范、冗余、风格不统一的SQL语句，
可以避免很多人为Bug，方便编码风格的统一和后期维护

// 直接使用！对于熟悉MVC的亲知道这个意义之所在！
$user = new ORM('user');  // ORM都有自己的规则，这里直接使用了MySQL的表名
$user->name = 'fancy';    // MySQL的表的字段就是$user对象的成员变量
$user->save();            // 调用ORM提供的接口函数

对于一般的Web应用开发来说，
使用ORM确实能带来上述的诸多好处，而且在大部分情况下涉及不到ORM的不好的地方。
但是在系统里面有大数据量、大运算量、复杂查询的地方，就不要用ORM。
ORM的性能问题将给你带来灾难。
在这些地方就可以使用纯SQL或者其他简单轻量的DB Helper库了。
在详细了解ORM之后，你就可以扬长避短让ORM发挥其最大效用了