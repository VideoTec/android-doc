只有两个属性
android:layout_height		Specifies the basic height of the view. 
android:layout_width		Specifies the basic width of the view. 

match_parent	-1	The view should be as big as its parent (minus padding). Introduced in API Level 8.
wrap_content	-2	The view should be only big enough to enclose its content (plus padding).

废弃了：
fill_parent		-1	The view should be as big as its parent (minus padding). This constant is deprecated starting from API Level 8 and is replaced by match_parent.

-----------------------------------------------
以layout_开头的属性为从容器中继承的属性
-----------------------------------------------

<RelativeLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent" >

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="hello_world" />
        
</RelativeLayout>

layout开头的属性并非TextView所拥有，
而是继承的容器中关于布局的属性

-----------------------------------------------
参考
http://developer.android.com/guide/topics/ui/declaring-layout.html#attributes
-----------------------------------------------

Layout Parameters

XML layout attributes named layout_something define layout parameters for the View that are appropriate for the ViewGroup in which it resides.

Every ViewGroup class implements a nested class that extends ViewGroup.LayoutParams. This subclass contains property types that define the size and position for each child view, as appropriate for the view group. As you can see in figure 1, the parent view group defines layout parameters for each child view (including the child view group).

Note that every LayoutParams subclass has its own syntax for setting values. Each child element must define LayoutParams that are appropriate for its parent, though it may also define different LayoutParams for its own children.

All view groups include a width and height (layout_width and layout_height), and each view is required to define them. Many LayoutParams also include optional margins and borders.

You can specify width and height with exact measurements, though you probably won't want to do this often. More often, you will use one of these constants to set the width or height:

wrap_content tells your view to size itself to the dimensions required by its content.
match_parent (named fill_parent before API Level 8) tells your view to become as big as its parent view group will allow.

In general, specifying a layout width and height using absolute units such as pixels is not recommended. Instead, using relative measurements such as density-independent pixel units (dp), wrap_content, or match_parent, is a better approach, because it helps ensure that your application will display properly across a variety of device screen sizes. The accepted measurement types are defined in the Available Resources document.