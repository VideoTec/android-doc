http://developer.android.com/intl/zh-cn/guide/components/processes-and-threads.html

文档：
Develop - API Guides - App Components - Process and Threads

-------------------------------------------------
Processes
-------------------------------------------------

By default, 
all components of the same application run in the same process and 
most applications should not change this. 
However, if you find that you need to 
control which process a certain component belongs to, 
you can do so in the manifest file.

The manifest entry for each type of component element
 <activity>, <service>, <receiver>, and <provider> 
supports an android:process attribute 
that can specify a process in which that component should run. 
You can set this attribute so that 
each component runs in its own process or so that 
some components share a process while others do not. 

You can also set android:process 
so that components of different applications 
run in the same process provided 
that the applications share the same Linux user ID and 
are signed with the same certificates.

The <application> element 
also supports an android:process attribute, 
to set a default value that applies to all components.

consequently[英][ˈkɒnsɪkwəntli] [美][ˈkɑ:nsəkwentli]
adv.所以，因此；因此，因而；终于，这样；合乎逻辑的推论是

readily[英][ˈredɪli] [美][ˈrɛdəli, ˈrɛdli]
adv.乐意地；快捷地；轻而易举地；便利地

Android might decide to shut down a process at some point, 
when memory is low and required by other processes 
that are more immediately serving the user. 
Application components running in the process 
that's killed are consequently destroyed. 
A process is started again for those components when there's again work for them to do.

When deciding which processes to kill, 
the Android system weighs their relative importance to the user. 
For example, 
it more readily shuts down a process hosting activities 
that are no longer visible on screen, 
compared to a process hosting visible activities. 
The decision whether to terminate a process, therefore, 
depends on the state of the components running in that process. 
The rules used to decide which processes to terminate is discussed below.

-------------------------------------------------
Process lifecycle
-------------------------------------------------

hierarchy[英][ˈhaɪərɑ:ki] [美][ˈhaɪərɑ:rki]
n.[计]分层，层次；等级制度；统治集团；天使的级别或等级

The Android system tries to 
maintain an application process for as long as possible, 
but eventually needs to remove old processes to reclaim memory 
for new or more important processes. 
To determine which processes to keep and which to kill, 
the system places each process into an "importance hierarchy" based on 
the components running in the process and 
the state of those components. 
Processes with the lowest importance are eliminated first, 
then those with the next lowest importance, and so on, 
as necessary to recover system resources.

There are five levels in the importance hierarchy. 
The following list presents the different types of processes 
in order of importance 
(the first process is most important and is killed last):

1）Foreground process
A process that is required for what the user is currently doing. A process is considered to be in the foreground if any of the following conditions are true:
It hosts an Activity that the user is interacting with (the Activity's onResume() method has been called).
It hosts a Service that's bound to the activity that the user is interacting with.
It hosts a Service that's running "in the foreground"—the service has called startForeground().
It hosts a Service that's executing one of its lifecycle callbacks (onCreate(), onStart(), or onDestroy()).
It hosts a BroadcastReceiver that's executing its onReceive() method.
Generally, only a few foreground processes exist at any given time. They are killed only as a last resort—if memory is so low that they cannot all continue to run. Generally, at that point, the device has reached a memory paging state, so killing some foreground processes is required to keep the user interface responsive.

2）Visible process
A process that doesn't have any foreground components, but still can affect what the user sees on screen. A process is considered to be visible if either of the following conditions are true:
It hosts an Activity that is not in the foreground, but is still visible to the user (its onPause() method has been called). This might occur, for example, if the foreground activity started a dialog, which allows the previous activity to be seen behind it.
It hosts a Service that's bound to a visible (or foreground) activity.
A visible process is considered extremely important and will not be killed unless doing so is required to keep all foreground processes running.

3）Service process
A process that is running a service that has been started with the startService() method and does not fall into either of the two higher categories. Although service processes are not directly tied to anything the user sees, they are generally doing things that the user cares about (such as playing music in the background or downloading data on the network), so the system keeps them running unless there's not enough memory to retain them along with all foreground and visible processes.

4）Background process
A process holding an activity 
that's not currently visible to the user 
(the activity's onStop() method has been called). 
These processes have no direct impact on the user experience, 
and the system can kill them at any time to reclaim memory 
for a foreground, visible, or service process. 
Usually there are many background processes running, 
so they are kept in an LRU (least recently used) list to ensure that the process with the activity that was most recently seen by the user is the last to be killed. If an activity implements its lifecycle methods correctly, and saves its current state, killing its process will not have a visible effect on the user experience, because when the user navigates back to the activity, the activity restores all of its visible state. See the Activities document for information about saving and restoring state.

5）Empty process
A process that doesn't hold any active application components. 
The only reason to keep this kind of process alive is for caching purposes, 
to improve startup time the next time a component needs to run in it. 
The system often kills these processes 
in order to balance overall system resources between process caches a
nd the underlying kernel caches.

Android ranks a process at the highest level it can, 
based upon the importance of the components currently active in the process. 
For example, 
if a process hosts a service and a visible activity, 
the process is ranked as a visible process, 
not a service process.

In addition, 
a process's ranking might be increased 
because other processes are dependent on it—a process 
that is serving another process 
can never be ranked lower than the process it is serving. 
For example, 
if a content provider in process A is serving a client in process B, or 
if a service in process A is bound to a component in process B, 
process A is always considered at least as important as process B.

employ[英][ɪmˈplɔɪ] [美][ɛmˈplɔɪ]
vt.雇用；使用，利用

Because a process running a service 
is ranked higher than a process with background activities, 
an activity that initiates a long-running operation 
might do well to start a service for that operation, 
rather than simply create a worker thread—particularly 
if the operation will likely outlast the activity. 
For example, 
an activity that's uploading a picture to a web site 
should start a service to perform the upload 
so that the upload can continue in the background 
even if the user leaves the activity. 
Using a service guarantees that the operation 
will have at least "service process" priority, 
regardless of what happens to the activity. 
This is the same reason that broadcast receivers 
should employ services rather than simply put time-consuming operations in a thread.