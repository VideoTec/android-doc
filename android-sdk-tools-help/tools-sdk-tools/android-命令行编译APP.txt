使用命令行编译android工程分为以下几步
1. 生成R文件
2. Java代码生成class文件
3. class文件生成dex文件
4. 打包资源
5. 生成apk
6. 创建密匙
7. 签名apk

使用ant管理工具
E:\android\adt\sdk\tools\ant\build.xml

<project name="CCGOEQQ" default="release">    
    <!-- ANT环境变量 -->    
    <property environment="env" />    
    <!-- 使用第三方的ant包，使ant支持for循环--> 
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">    
      <classpath>    
        <pathelement location="lib/ant-contrib-1.0b3.jar"/>    
      </classpath>    
    </taskdef> 
    <!-- 应用名称 -->    
    <property name="appName" value="${ant.project.name}"/>    
    <!-- SDK目录(获取操作系统环境变量ANDROID_SDK_HOME的值) -->    
    <property name="sdk-folder" value="${env.ANDROID_SDK_HOME}" />    
    <!-- SDK指定平台目录 -->    
    <property name="sdk-platform-folder" value="${sdk-folder}/platforms/android-10"/>    
    <!-- SDK中tools目录 -->    
    <property name="sdk-tools" value="${sdk-folder}/tools" />    
    <!-- SDK指定平台中tools目录 -->    
    <property name="sdk-platform-tools" value="${sdk-folder}/platform-tools" />    
      
       
    <!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->    
    <property name="aapt" value="${sdk-platform-tools}/aapt" />    
    <property name="aidl" value="${sdk-platform-tools}/aidl" />    
    <property name="dx" value="${sdk-platform-tools}/dx.bat" />    
    <property name="apkbuilder" value="${sdk-tools}/apkbuilder.bat" />    
    <property name="jarsigner" value="${env.JAVA_HOME}/bin/jarsigner" />    
    <property name="zipalign" value="${sdk-tools}/zipalign.exe" /> 
        
    <!-- 编译需要的jar; 如果项目使用到地图服务则需要maps.jar -->    
    <property name="android-jar" value="${sdk-platform-folder}/android.jar" />    
 
 <property name="native.libs.absolute.dir" location="libs" /> 
      
    <!-- --> 
    <property name="channelname" value="" />    
    <property name="channelkey" value="" />    
          
    <!-- 编译aidl文件所需的预处理框架文件framework.aidl -->    
    <property name="framework-aidl" value="${sdk-platform-folder}/framework.aidl" />    
    
      
    
    <!-- 清单文件 -->    
    <property name="manifest-xml" value="AndroidManifest.xml" />    
    <!-- 源文件目录 -->    
    <property name="resource-dir" value="res" />    
    <property name="asset-dir" value="assets" />    
    <!-- java源文件目录 -->    
    <property name="srcdir" value="src" />    
    <property name="srcdir-ospath" value="${basedir}/${srcdir}" />    
    <!-- 外部类库所在目录 -->    
    <property name="external-lib" value="libs" />    
    <property name="external-lib-ospath" value="${basedir}/${external-lib}" />    
    <property name="external-lib-ospath_so" value="${basedir}/${external-lib}/armeabi" />    
      
    <!-- 定义你需要打包的渠道******改下面    --> 
    <!-- 渠道名:渠道号 --> 
    <property name="key" value="2002:2002"/> 
    <property name="configFile" value="test"/> 
    <!-- !!!!!!!!!!!!!!!!!! --> 
          
    <!-- 版本 --> 
    <property name="version" value="0.9.1" /> 
    <!-- 每次升级加1--> 
    <property name="versioncode" value="6" /> 
      
    <!-- 初始化工作 -->    
    <target name="init">    
        <echo>目录初始化....</echo>    
            <!-- 生成R文件的相对目录 -->    
            <var name="outdir-gen" value="gen" />    
            <!-- 编译后的文件放置目录 -->    
            <var name="outdir-bin" value="bin-${channelname}" />    
            <!-- 生成class目录 -->    
            <var name="outdir-classes" value="${outdir-bin}" />    
            <var name="outdir-classes-ospath" value="${basedir}/${outdir-classes}" />    
            
            <!-- classes.dex相关变量 -->    
            <var name="dex-file" value="classes.dex" />    
            <var name="dex-path" value="${outdir-bin}/${dex-file}" />    
            <var name="dex-ospath" value="${basedir}/${dex-path}" />    
            
            <!-- 经过aapt生成的资源包文件 -->    
            <var name="resources-package" value="${outdir-bin}/resources.ap_" />    
            <var name="resources-package-ospath" value="${basedir}/${resources-package}" />    
            <var name="libs-package" value="${outdir-bin}/libs" />    
                
            <!-- 未认证apk包 -->    
            <var name="out-unsigned-package" value="${outdir-bin}/${appName}-unsigned.apk" />    
            <var name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />    
                
            <!-- 证书文件 -->    
            <var name="keystore-file" value="${basedir}/elex.keystore" />    
                
            <!-- 已认证apk包 -->    
            <var name="out-signed-package" value="${outdir-bin}/${appName}-${channelname}-${version}.apk" />    
            <var name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" />    
        <delete dir="${outdir-bin}" />    
        <mkdir dir="${outdir-bin}" />    
        <mkdir dir="${outdir-classes}" />   
 
    </target>    
      
    <!--循环打包 --> 
    <target name="deploy">    
       <foreach target="modify_manifest" list="${key}" param="nameandchannel" delimiter=",">    
       </foreach>    
     </target>    
       
    <target name="modify_manifest"> 
        <!-- 获取渠道名字 --> 
        <propertyregex override="true" property="channelname" input="${nameandchannel}" regexp="(.*):" select="\1"/> 
        <!-- 获取渠道号码 --> 
        <propertyregex override="true" property="channelkey" input="${nameandchannel}" regexp=":(.*)" select="\1"/> 
        <!-- 正则匹配替换渠道号 --> 
        <!-- (.*)为正则匹配任意文本--> 
        <!-- \1是一个反向引用 </channelID>--> 
      
    <!-- 换包名，versionname ,versioncode --> 
        <replaceregexp flags="g" byline="false" encoding="UTF-8">    
            <regexp pattern='package="(.*)" android:versionCode="(.*)" android:versionName="(.*)"' />         
            <substitution expression='package="com.elextech.goeqq${channelname}" android:versionCode="${versioncode}" android:versionName="${version}"' />    
        <fileset dir="" includes="AndroidManifest.xml" />    
        </replaceregexp>    
          
        <!-- 修改cannelID 还有configFile--> 
        <replace  dir="${basedir}/res/raw" includes="**/*.xml"   token="channelId>8888" value="channelId>${channelkey}"/> 
        <replace  dir="${basedir}/res/raw" includes="**/*.xml"   token="configFile>test" value="configFile>${configFile}"/> 
          
        <antcall target="CAOrelease" /> 
    </target>    
      
    <!-- 根据工程中的资源文件生成R.java文件  -->    
   <target name="gen-R" depends="init">    
        <echo>生成R.java文件....</echo>    
        <exec executable="${aapt}" failonerror="true">    
            <arg value="package" />    
            <arg value="-f" />    
            <arg value="-m" />    
            <arg value="-J" />    
            <arg value="${outdir-gen}" />    
            <arg value="-S" />    
            <arg value="${resource-dir}" />    
            <arg value="-M" />    
            <arg value="${manifest-xml}" />    
            <arg value="-I" />    
            <arg value="${android-jar}" />    
        </exec>    
    </target>    
      
    <!-- 编译aidl文件 -->    
    <target name="aidl" depends="gen-R">    
        <echo>编译aidl文件....</echo>    
        <apply executable="${aidl}" failonerror="true">    
            <!-- 指定预处理文件 -->    
            <arg value="-p${framework-aidl}"/>    
            <!-- aidl声明的目录 -->    
            <arg value="-I${srcdir}"/>    
            <!-- 目标文件目录 -->    
            <arg value="-o${outdir-gen}"/>    
            <!-- 指定哪些文件需要编译 -->    
            <fileset dir="${srcdir}">    
                <include name="**/*.aidl"/>    
            </fileset>    
        </apply>    
    </target>    
      
    <!-- 将工程中的java源文件编译成class文件 -->    
    <target name="compile" depends="aidl">    
        <echo>java源文件编译成class文件....GBK</echo>    
        <javac encoding="utf-8" 
                target="1.6"   
                srcdir="."   
                destdir="${outdir-classes}"   
                bootclasspath="${android-jar}" 
                verbose="false" 
                >    
            <compilerarg line="-encoding UTF-8"/>   
            <classpath>    
                <fileset dir="${external-lib}" includes="*.jar"/>    
            </classpath> 
        </javac>    
    </target>   
      
      
    <!-- 将.class文件转化成.dex文件 -->    
    <target name="dex" depends="compile">    
        <echo>将.class文件转化成.dex文件....</echo>    
        <exec executable="${dx}" failonerror="true" >    
            <arg value="--dex" />   
            <!-- 输出文件 -->    
            <arg value="--output=${dex-ospath}" />    
            <!-- 要生成.dex文件的源classes和libraries -->    
            <arg value="${outdir-classes-ospath}" />    
            <arg value="${external-lib-ospath}"/>    
        </exec>    
    </target>    
      
    <!-- 将资源文件放进输出目录 -->    
    <target name="package-res-and-assets">    
        <echo>将资源文件放进输出目录....</echo>    
        <exec executable="${aapt}" failonerror="true">    
            <arg value="package" />    
            <arg value="-f" />    
            <arg value="-M" />    
            <arg value="${manifest-xml}" />    
            <arg value="-S" />    
            <arg value="${resource-dir}" />    
            <arg value="-A" />    
            <arg value="${asset-dir}" />    
            <arg value="-I" />    
            <arg value="${android-jar}" />    
            <arg value="-F" />    
            <arg value="${resources-package}" />    
        </exec>    
    </target>    
      
    <!-- 打包成未签证的apk -->    
    <target name="package" depends="dex, package-res-and-assets">    
        <echo>打包成未签证的apk....</echo>    
        <exec executable="${apkbuilder}" failonerror="true">    
            <arg value="${out-unsigned-package-ospath}" />    
            <arg value="-u" />    
            <arg value="-z" />    
            <arg value="${resources-package-ospath}" />    
            <arg value="-f" />    
            <arg value="${dex-ospath}" />    
            <arg value="-rf" />    
            <arg value="${srcdir-ospath}" />    
             <arg value="-nf" />    
            <arg value="${external-lib-ospath}" />    
        </exec>    
    </target>    
      
    <!-- 对apk进行签证 -->    
    <target name="jarsigner" depends="package">    
        <echo>Packaging signed apk for release...</echo>    
        <exec executable="${jarsigner}" failonerror="true">    
          <arg line="-verbose -digestalg SHA1 -sigalg MD5withRSA" />   
            <arg value="-keystore" />    
            <arg value="${keystore-file}" />    
            <arg value="-storepass" />    
            <arg value="123456" />    
            <arg value="-keypass" />    
            <arg value="123456" />    
            <arg value="-signedjar" />    
            <arg value="${out-signed-package-ospath}" />    
            <arg value="${out-unsigned-package-ospath}"/>    
            <!-- 不要忘了证书的别名 -->    
            <arg value="elex.keystore"/>    
        </exec>    
    </target>    
      
    <!-- 发布 -->    
    <target name="release" depends="jarsigner">    
        <!-- 删除未签证apk --> 
        <delete file="${out-unsigned-package-ospath}"/>    
          
        <!--删除其他文件 --> 
         <delete file="${resources-package}"/>    
          <delete file="${dex-path}"/>    
          
        <echo>APK is released. path:${out-signed-package-ospath}</echo>    
    </target>    
      
    <target name="zipalign" depends="release"> 
        <exec executable="${zipalign}" failonerror="true"> 
            <arg value="-v" /> 
            <arg value="4" /> 
            <arg value="${out-signed-package-ospath}" /> 
            <arg value="${out-signed-package-ospath}-zipaligned.apk" /> 
        </exec> 
    </target> 
      
    <!-- 整理目录 -->    
    <target name="CAOrelease" depends="zipalign">    
        <!-- 删除没优化apk  --> 
        <delete file="${out-signed-package-ospath}"/>   
          
        <!--删除其他文件 --> 
         <delete dir="${outdir-bin}/org"/>    
          <delete dir="${outdir-bin}/com"/>    
    <!-- 修改cannelID --> 
        <replace  dir="${basedir}/res/raw" includes="**/*.xml"   token="channelId>${channelkey}" value="channelId>8888"/> 
        <replace  dir="${basedir}/res/raw" includes="**/*.xml"   token="configFile>${configFile}" value="configFile>test"/> 
        <echo>CAO Clean</echo>    
    </target>    
      
      
</project> 