应该加入 版本控制

里面存放各种插件的配置文件

版本控制一定要，包含 .settings 目录 参考：
E:\doc\android\android-eclipse\android-eclipse-Syntax error, annotations are only available if source level is 1.5 or greater.txt

----------------------------------
http://stackoverflow.com/questions/1551008/why-does-eclipse-create-a-settings-directory
----------------------------------

This file records project specific settings vs. workspace preferences.

I noticed that this file is usually created when you convert a regular Java project to Java EE project.

The only time I would check this file in is when the project's compiler/warning settings are different from the default workspace settings.

This may be the case when some legacy projects cannot be compiled with the latest and greatest java compiler, 
or when the source code generated by a 3rd party produces a lot of warnings that are benign but pollute your Problems view.

If you are going to use project specific settings, then definitely check this file in. Otherwise delete it.

----------------------------------
http://stackoverflow.com/questions/12513114/should-i-check-in-the-eclipse-settings-settings-to-svn
----------------------------------

是否需要加入版本控制：结论应该加入
The .settings directory contains – or at least should contain – vital information needed to successfully build your project inside Eclipse, such as the character encoding used for source code, Java compiler settings, and much more. If you don't commit that directory to the SCM, you will in most cases lose the ability to check out the project into a fresh workspace and immediately get it to compile. An especially sensitive aspect is the precise configuration of compiler errors/warnings. If a developer has these set up wrong, the consequences can range from frustrations by failed Eclipse builds to developers damaging code in an attempt to "fix" nonexistent errors/warnings.

Each plugin can contribute its own settings file to the directory, so feel free to pick out and ignore the irrelevant ones, retaining the important ones, like org.eclipse.jdt.core.prefs.

You do have to be very careful not to mess with project-specific settings in a way that would break the build for others. Any personal preferences should be changed globally at the workspace level, so that this configuration doesn't propagate to teammates.

One may theoretically enforce a policy where everyone is required to import project-specific settings from another place and never commit them, but that route offers no advantages and is obviously inferior in the ease-of-use department.