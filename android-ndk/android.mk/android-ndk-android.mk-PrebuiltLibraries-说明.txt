Android NDK r5 introduced support for prebuilt libraries (shared and static), 
i.e. the ability to include and use, in your applications, prebuilt version of libraries.

This feature can be useful for two things:

总结一句话是：可以使用第三方库（静态库或者动态库）
You want to distribute your own libraries to third-party NDK developers without distributing your sources.
You want to use a prebuilt version of your own libraries to speed up your build.

------------------------------------
模板
------------------------------------
include $(CLEAR_VARS)
LOCAL_MODULE := 
LOCAL_SRC_FILES := 
include $(PREBUILT_STATIC_LIBRARY)

------------------------------------
示例代码
------------------------------------
include $(CLEAR_VARS)
LOCAL_MODULE := foo-prebuilt             Give the module a name
LOCAL_SRC_FILES := libfoo.so             the path to the prebuilt library you are providing
                                         You must ensure that the prebuilt library corresponds to the target ABI you are using
                                         armeabi     => when targeting ARMv5TE or higher CPUs
                                         armeabi-v7a => when targeting ARMv7 or higher CPUs
                                         x86         => when targeting x86 CPUs
                                         mips        => when targeting MIPS CPUs

include $(PREBUILT_SHARED_LIBRARY)       或者 include $(PREBUILT_STATIC_LIBRARY)

A prebuilt module does not build anything. 
However, a copy of your prebuilt shared library will be 
copied into $PROJECT/obj/local, and another will be 
copied and stripped into $PROJECT/libs/<abi>

------------------------------------
Exporting headers for prebuilt libraries
------------------------------------
include $(CLEAR_VARS)
LOCAL_MODULE := foo-prebuilt
LOCAL_SRC_FILES := libfoo.so
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include
include $(PREBUILT_SHARED_LIBRARY)

------------------------------------
引用 库文件
------------------------------------
LOCAL_SHARED_LIBRARIES
LOCAL_STATIC_LIBRARIES     The list of static libraries modules that the current module depends on
If the current module is a shared library or an executable, this will force these libraries to be linked into the resulting binary
If the current module is a static library, this simply tells that another other module that depends on the current one will also depend on the listed libraries
