The file is really a tiny GNU Makefile fragment that the build system parses once or more. 
As such, you should try to minimize the variables you declare there. 
Also, do not assume that anything is not defined during parsing.

把源码组织成 模块
The file syntax is designed to allow you to group your sources into “modules”. 
A module is one of the following:
A static library.
A shared library.
A standalone executable.

在同一个 android.mk 文件里，可以定义多个模块
一个源文件，可用于多个模块

只用列出源文件名称，不用列出依赖的头文件
The build system handles many details for you. 
For example, you don't need to list header files or explicit dependencies between generated files in your Android.mk. 
The NDK build system computes these automatically for you.

重要语句解释，变量分为三类
NDK-provided variables
NDK-provided function macros
Module-description variables

NDK-provided variables 
CLEAR_VARS
BUILD_SHARED_LIBRARY
BUILD_STATIC_LIBRARY
PREBUILT_SHARED_LIBRARY
PREBUILT_STATIC_LIBRARY
TARGET_ARCH
TARGET_PLATFORM
TARGET_ARCH_ABI
TARGET_ABI

NDK-provided function macros
my-dir
all-subdir-makefiles
this-makefile
parent-makefile
grand-parent-makefile
import-module

LOCAL_PATH := $(call my-dir)
指定源文件所在路径
It is used to locate source files in the development tree

--------------------------------------------------
include $(CLEAR_VARS) 模块开始语句，可有下面的结束语句
--------------------------------------------------
1) include $(BUILD_SHARED_LIBRARY)
2) include $(BUILD_STATIC_LIBRARY)
3) include $(PREBUILT_STATIC_LIBRARY)
4) include $(PREBUILT_SHARED_LIBRARY)

示例代码：
include $(CLEAR_VARS)

LOCAL_MODULE := jpeg
LOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/libjpeg/lib/libjpeg.a
LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/$(TARGET_ARCH_ABI)/libjpeg/include

include $(PREBUILT_STATIC_LIBRARY)

--------------------------------------------------
Module-description variables 模块描述变量
--------------------------------------------------
The following variables are used to describe your module to the build system. 
You should define some of them between an 'include ' and an 'include '. 
As written previously, is a script that will undefine/clear all of these variables, unless explicitly noted in their description.

LOCAL_MODULE  (:= foo-version-1)
LOCAL_MODULE_FILENAME (:= libfoo)

--------------------------------------------------
LOCAL_SRC_FILES 
--------------------------------------------------
1. 列出模块需要的所有源文件    *.c *.cpp 以空格分开，可以使用 续行符 \
2. 可以指定 预构建 的库文件名  lib/libavutil.a 等等
   用于PREBUILT_STATIC_LIBRARY 或者 PREBUILT_SHARED_LIBRARY 模块

Since NDK r7, you can list several extensions in this variable, as in:
defined to indicate the file extension(s) of C++ source files
LOCAL_CPP_EXTENSION := .cxx .cpp .cc

LOCAL_DISABLE_NO_EXECUTE 默认是FALSE, 默认开启： Android NDK r4 added support for the "NX bit" security feature
LOCAL_DISABLE_RELRO      
LOCAL_DISABLE_FORMAT_STRING_CHECKS
LOCAL_FILTER_ASM 

--------------------------------------------------
编译选项
--------------------------------------------------
LOCAL_C_INCLUDES
LOCAL_CFLAGS        compiler flags that will be passed when building C and C++ source files.
LOCAL_CPPFLAGS      等同于 LOCAL_CXXFLAGS
                    specify flags for C++ sources only now
					They will appear after the LOCAL_CFLAGS
LOCAL_ARM_MODE      default 'thumb' mode, 可以指定 'arm' (32-bit instructions) mode
                    LOCAL_SRC_FILES := foo.c bar.c.arm
                    gcc flags -mthumb -marm

LOCAL_ARM_NEON      'true' allows the use of ARM Advanced SIMD
                    only define it when targeting the 'armeabi-v7a' ABI that corresponds to the ARMv7 instruction set
                    not all ARMv7 based CPUs support the NEON instruction set extensions
                    LOCAL_SRC_FILES = foo.c.neon bar.c zoo.c.arm.neon
					gcc flags -mfpu=‘neon’

--------------------------------------------------
链接选项
--------------------------------------------------
LOCAL_ALLOW_UNDEFINED_SYMBOLS (true false) gcc 的 -Wl,--no-undefined链接选项
LOCAL_LDFLAGS
LOCAL_LDLIBS (:= -lz)
LOCAL_WHOLE_STATIC_LIBRARIES               GNU linker's documentation for the --whole-archive flag

LOCAL_THIN_ARCHIVE  用于构建静态库时，.a 文件里是 .o 文件的引用 gnu ar thin archive

--------------------------------------------------
LOCAL_SHARED_LIBRARIES LOCAL_STATIC_LIBRARIES
--------------------------------------------------
依赖当前 android.mk 文件里的 其它模块 (模块名称)
LOCAL_SHARED_LIBRARIES
LOCAL_STATIC_LIBRARIES     The list of static libraries modules that the current module depends on
If the current module is a shared library or an executable, this will force these libraries to be linked into the resulting binary
If the current module is a static library, this simply tells that another other module that depends on the current one will also depend on the listed libraries
相关的变量, 依赖模块中输出的编译选项
LOCAL_EXPORT_CFLAGS
LOCAL_EXPORT_CPPFLAGS
LOCAL_EXPORT_C_INCLUDES
LOCAL_EXPORT_LDFLAGS
LOCAL_EXPORT_LDLIBS
