https://developer.android.com/reference/android/animation/ValueAnimator.html

java.lang.Object
   ↳	android.animation.Animator
 	   ↳	android.animation.ValueAnimator

Known Direct Subclasses
ObjectAnimator, TimeAnimator

This class provides a simple timing engine for running animations 
which calculate animated values and set them on target objects.

There is a single timing pulse that all animations use. 
It runs in a custom handler to ensure that property changes happen on the UI thread.

By default, ValueAnimator uses non-linear time interpolation, 
via the AccelerateDecelerateInterpolator class, 
which accelerates into and decelerates out of an animation. 
This behavior can be changed by calling setInterpolator(TimeInterpolator).

Animators can be created from either code or resource files. 
Here is an example of a ValueAnimator resource file:

<animator xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1000"
    android:valueFrom="1"
    android:valueTo="0"
    android:valueType="floatType"
    android:repeatCount="1"
    android:repeatMode="reverse"/>
    
It is also possible to use a combination of PropertyValuesHolder and 
Keyframe resource tags to create a multi-step animation. 
Note that you can specify explicit fractional values (from 0 to 1) 
for each keyframe to determine when, in the overall duration, 
the animation should arrive at that value. Alternatively, 
you can leave the fractions off and the keyframes will be equally distributed within the total duration:

<animator xmlns:android="http://schemas.android.com/apk/res/android"
          android:duration="1000"
          android:repeatCount="1"
          android:repeatMode="reverse">
    <propertyValuesHolder>
        <keyframe android:fraction="0" android:value="1"/>
        <keyframe android:fraction=".2" android:value=".4"/>
        <keyframe android:fraction="1" android:value="0"/>
    </propertyValuesHolder>
</animator>