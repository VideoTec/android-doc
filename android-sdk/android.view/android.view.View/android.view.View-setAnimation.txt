Animation

Starting with Android 3.0, the preferred way of animating views is to use the android.animation package APIs. These Animator-based classes change actual properties of the View object, such as alpha and translationX. This behavior is contrasted to that of the pre-3.0 Animation-based classes, which instead animate only how the view is drawn on the display. In particular, the ViewPropertyAnimator class makes animating these View properties particularly easy and efficient.

Alternatively, you can use the pre-3.0 animation classes to animate how Views are rendered. You can attach an Animation object to a view using setAnimation(Animation) or startAnimation(Animation). The animation can alter the scale, rotation, translation and alpha of a view over time. If the animation is attached to a view that has children, the animation will affect the entire subtree rooted by that node. When an animation is started, the framework will take care of redrawing the appropriate views until the animation completes.

文档：
public void setAnimation (Animation animation)

invalidation[英][ɪnˌvælɪ'deɪʃn] [美][ɪnˌvælɪ'deɪʃn] n.无效，失效
fine-grained[英][faɪn'greɪnd] [美]['faɪn'greɪnd] 有细密纹理的

Added in API level 1
Sets the next animation to play for this view. 
If you want the animation to play immediately, use startAnimation(android.view.animation.Animation) instead. 
This method provides allows fine-grained control over the start time and invalidation, but you must make sure that 
1) the animation has a start time set, and 
2) the view's parent (which controls animations on its children) will be invalidated when the animation is supposed to start.

Parameters
animation	The next animation, or null.

什么时候自动开始动画？
父View调用 invalidated 的时候会调用设置的动画