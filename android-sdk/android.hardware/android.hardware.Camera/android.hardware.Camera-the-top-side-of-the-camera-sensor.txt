--------------------------------------------------------------------
Camera.Parameters 
--------------------------------------------------------------------
public void setRotation (int rotation)

Added in API level 5
Sets the clockwise rotation angle in degrees relative to the orientation of the camera. 
This affects the pictures returned from JPEG Camera.PictureCallback. 
The camera driver may set orientation in the EXIF header without rotating the picture. 
Or the driver may rotate the picture and the EXIF thumbnail. 
If the Jpeg picture is rotated, the orientation in the EXIF header will be missing or 1 (row #0 is top and column #0 is left side).

If applications want to rotate the picture to match the orientation of what users see, 
apps should use OrientationEventListener and Camera.CameraInfo. 
The value from OrientationEventListener is relative to the natural orientation of the device. 
CameraInfo.orientation is the angle between camera orientation and natural device orientation. 
The sum of the two is the rotation angle for back-facing camera. 
The difference of the two is the rotation angle for front-facing camera. 
Note that the JPEG pictures of front-facing cameras are not mirrored as in preview display.

For example, suppose the natural orientation of the device is portrait. 
The device is rotated 270 degrees clockwise, so the device orientation is 270. 
Suppose a back-facing camera sensor is mounted in landscape and 
the top side of the camera sensor is aligned with the right edge of the display in natural orientation. 
So the camera orientation is 90. The rotation should be set to 0 (270 + 90).

The reference code is as follows.

public void onOrientationChanged(int orientation) {
     if (orientation == ORIENTATION_UNKNOWN) return;
     android.hardware.Camera.CameraInfo info =
            new android.hardware.Camera.CameraInfo();
     android.hardware.Camera.getCameraInfo(cameraId, info);
     orientation = (orientation + 45) / 90 * 90;
     int rotation = 0;
     if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
         rotation = (info.orientation - orientation + 360) % 360;
     } else {  // back-facing camera
         rotation = (info.orientation + orientation) % 360;
     }
     mParameters.setRotation(rotation);
}

--------------------------------------------------------------------
这段文档里 重要概念
--------------------------------------------------------------------
the orientation of the camera          可能通过 Camera.CameraInfo.orientation 获得
the natural orientation of the device  通过 onOrientationChanged 事件能够得到角度
the top side of the camera sensor      通过上面两个角度可以知道

--------------------------------------------------------------------
Camera.CameraInfo.orientation
--------------------------------------------------------------------
The orientation of the camera image.
The orientation of the camera image. 
The value is the angle that the camera image needs to be rotated clockwise so it shows correctly on the display in its natural orientation. 
It should be 0, 90, 180, or 270.

For example, suppose a device has a naturally tall screen. 
The back-facing camera sensor is mounted in landscape. 
You are looking at the screen. 
If the top side of the camera sensor is aligned with the right edge of the screen in natural orientation, 
the value should be 90. 
If the top side of a front-facing camera sensor is aligned with the right of the screen, 
the value should be 270.

--------------------------------------------------------------------
Camera public final void setDisplayOrientation (int degrees)
--------------------------------------------------------------------

Added in API level 8
Set the clockwise rotation of preview display in degrees. 
This affects the preview frames and the picture displayed after snapshot. 
This method is useful for portrait mode applications. 
Note that preview display of front-facing cameras is flipped horizontally before the rotation, that is, 
the image is reflected along the central vertical axis of the camera sensor. 
So the users can see themselves as looking into a mirror.

This does not affect the order of byte array passed in onPreviewFrame(byte[], Camera), JPEG pictures, or recorded videos. 
This method is not allowed to be called during preview.

If you want to make the camera image show in the same orientation as the display, you can use the following code.

 public static void setCameraDisplayOrientation(Activity activity,
         int cameraId, android.hardware.Camera camera) {
     android.hardware.Camera.CameraInfo info =
             new android.hardware.Camera.CameraInfo();
     android.hardware.Camera.getCameraInfo(cameraId, info);
     int rotation = activity.getWindowManager().getDefaultDisplay()
             .getRotation();
     int degrees = 0;
     switch (rotation) {
         case Surface.ROTATION_0: degrees = 0; break;
         case Surface.ROTATION_90: degrees = 90; break;
         case Surface.ROTATION_180: degrees = 180; break;
         case Surface.ROTATION_270: degrees = 270; break;
     }

     int result;
     if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
         result = (info.orientation + degrees) % 360;
         result = (360 - result) % 360;  // compensate the mirror
     } else {  // back-facing
         result = (info.orientation - degrees + 360) % 360;
     }
     camera.setDisplayOrientation(result);
 }