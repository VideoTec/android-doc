注意一：
注入的对象绑定到 javascript 中的 window 对象中。
webView.addJavascriptInterface(new JsObject(), "injectedObject");
理解 javascript 全局作用域的概念
http://stackoverflow.com/questions/22822952/javascript-is-the-windows-object-a-default-object
In Javascript, there is something called the Global scope. 
On Browsers, the global scope object is window. 
If you create a variable outside of a function, 
it goes by default into the global scope, which is window.

http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object, java.lang.String)

public void addJavascriptInterface (Object object, String name)

Added in API level 1

Injects the supplied Java object into this WebView. 
The object is injected into the JavaScript context of the main frame, 
using the supplied name. 

This allows the Java object's methods to be accessed from JavaScript.
 
For applications targeted to API level JELLY_BEAN_MR1 and above, 
only public methods that are annotated with JavascriptInterface can be accessed from JavaScript.
 
For applications targeted to API level JELLY_BEAN or below, 
all public methods (including the inherited ones) can be accessed, 
see the important security note below for implications.

Note that injected objects will not appear in JavaScript 
until the page is next (re)loaded. 

For example:

 class JsObject {
    @JavascriptInterface
    public String toString() { return "injectedObject"; } 问题：必须是 public 吗？
 }
 webView.addJavascriptInterface(new JsObject(), "injectedObject");
 webView.loadData("", "text/html", null);
 webView.loadUrl("javascript:alert(injectedObject.toString())");
 
IMPORTANT:

This method can be used to allow JavaScript to control the host application. 
This is a powerful feature, 
but also presents a security risk for apps targeting JELLY_BEAN or earlier. 

Apps that target a version later than JELLY_BEAN are still vulnerable 
if the app runs on a device running Android earlier than 4.2. 

The most secure way to use this method is 
to target JELLY_BEAN_MR1 and 
to ensure the method is called only when running on Android 4.2 or later. 

With these older versions, 
JavaScript could use reflection to access an injected object's public fields. 
Use of this method in a WebView 
containing untrusted content could allow an attacker to 
manipulate the host application in unintended ways, 
executing Java code with the permissions of the host application. 

Use extreme care when using this method 
in a WebView which could contain untrusted content.

JavaScript interacts with Java object 
on a private, background thread of this WebView. 

Care is therefore required to maintain thread safety.
The Java object's fields are not accessible.

For applications targeted to API level LOLLIPOP and above, 
methods of injected Java objects are enumerable from JavaScript.

Parameters

object
the Java object to inject into this WebView's JavaScript context. Null values are ignored.

name
the name used to expose the object in JavaScript

---------------------------------------
例子：错误
---------------------------------------

    class RFJSInterface {
        @SuppressWarnings("unused")
        @JavascriptInterface
        public void onWebPageInfo(String infoJson) {
            LogFeinno.i(TAG, "[from js]" + infoJson);
        }
    }
    mWebView.addJavascriptInterface(new RFJSInterface(), "RFNativeObj"); //todo: api < 17 时的安全问题
    
    js 代码：
    
    function fetchWebPageInfo() {
        var description = getMetaData('description');
        var icon = getIcon();
        RFNativeObj.onWebPageInfo({'description': description, 'icon': icon}); 注意这里的参数 JSON
    }

    var RFJsObject = window.RFJsObject = {
        fetchWebPageInfo: fetchWebPageInfo
    }
    
    java 中调用：
    
    mWebView.loadUrl("javascript:RFJsObject.fetchWebPageInfo();");
    
    结果，onWebPageInfo 接收到一个 undefined 字符串
    原因是没有搞清楚 js 中的 json 对象的含义：
    var json = JSON.stringify({'description': getMetaData('description'), 'icon': getIcon()});