文档
http://developer.android.com/reference/android/os/Handler.html

主要理解一点：Handler::handleMessage 是那个线程里执行？

A Handler allows you to send and process Message and Runnable objects associated with a thread's MessageQueue. Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it -- from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue.

There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own.

Scheduling messages is accomplished with the post(Runnable), postAtTime(Runnable, long), postDelayed(Runnable, long), sendEmptyMessage(int), sendMessage(Message), sendMessageAtTime(Message, long), and sendMessageDelayed(Message, long) methods. The post versions allow you to enqueue Runnable objects to be called by the message queue when they are received; the sendMessage versions allow you to enqueue a Message object containing a bundle of data that will be processed by the Handler's handleMessage(Message) method (requiring that you implement a subclass of Handler).

When posting or sending to a Handler, you can either allow the item to be processed as soon as the message queue is ready to do so, or specify a delay before it gets processed or absolute time for it to be processed. The latter two allow you to implement timeouts, ticks, and other timing-based behavior.

When a process is created for your application, its main thread is dedicated to running a message queue that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and any windows they create. You can create your own threads, and communicate back with the main application thread through a Handler. This is done by calling the same post or sendMessage methods as before, but from your new thread. The given Runnable or Message will then be scheduled in the Handler's message queue and processed when appropriate.

java.lang.Object
   ↳	android.os.Handler
Known Direct Subclasses
AsyncQueryHandler, AsyncQueryHandler.WorkerHandler, HttpAuthHandler, SslErrorHandler

Handler主要有两个作用：
在工作线程中发送消息。
在UI线程中获取、处理消息。

Handler，它直接继承自Object，
一个Handler允许发送和处理Message或者Runnable对象，
并且会关联到主线程的MessageQueue中。
每个Handler具有一个单独的线程，      这个么理解？
并且关联到一个消息队列的线程，
就是说一个Handler有一个固有的消息队列。
当实例化一个Handler的时候，
它就承载在一个线程和消息队列的线程，
这个Handler可以把Message或Runnable压入到消息队列，
并且从消息队列中取出Message或Runnable，进而操作它们。

scheduling[英]['ʃedju:lɪŋ] [美]['ʃedju:lɪŋ] n.行程安排，时序安排；排时间表
schedule[英][ˈʃedju:l] [美][ˈskedʒu:l] n.时刻表，进度表；清单，明细表；预定计划；目录
enqueue[英][enk'ju:] [美][enk'ju:] [计] 入队，排队
accomplished[英][əˈkʌmplɪʃt] [美][əˈkɑ:mplɪʃt] adj.才华高的；技艺高超的；熟练的
appropriate[英][əˈprəʊpriət] [美][əˈproʊpriət] adj.适当的；恰当的；合适的

A Handler allows you to send and process Message and Runnable objects associated with a thread's MessageQueue. 
Each Handler instance is associated with a single thread and that thread's message queue. 
When you create a new Handler, 
it is bound to the thread / message queue of the thread that is creating it -- from that point on, 
it will deliver messages and runnables to that message queue and 
execute them as they come out of the message queue.

There are two main uses for a Handler: 
(1) to schedule messages and runnables to be executed as some point in the future; and 
(2) to enqueue an action to be performed on a different thread than your own.

Scheduling messages is accomplished with the 

把Runnable对象压入队到消息队列
它会传递一个Runnable对象到消息队列中，在这个Runnable对象中，重写run()方法。
一般在这个run()方法中写入需要在UI线程上的操作
post(Runnable), 
postAtTime(Runnable, long), 
postDelayed(Runnable, long),
 
把包含消息数据的Message对象压入到消息队列
Handler需要重写handleMessage()方法，用于获取工作线程传递过来的消息，
此方法运行在UI线程上
sendEmptyMessage(int), 
sendMessage(Message), 
sendMessageAtTime(Message, long), and 
sendMessageDelayed(Message, long) methods. 

The post versions allow you to 
enqueue Runnable objects to be called by the message queue when they are received; 

The sendMessage versions allow you to 
enqueue a Message object containing a bundle of data 
that will be processed by the Handler's handleMessage(Message) method 
(requiring that you implement a subclass of Handler).

When posting or sending to a Handler, 
you can either allow the item to be processed as soon as the message queue is ready to do so, or 
specify a delay before it gets processed or absolute time for it to be processed. 
The latter two allow you to implement timeouts, ticks, and other timing-based behavior.

概念：主线程的 Message Queue

When a process is created for your application, 
its main thread is dedicated to running a message queue 
that takes care of managing the top-level application objects (activities, broadcast receivers, etc) and 
any windows they create. 

You can create your own threads, and communicate back with the main application thread through a Handler. 
This is done by calling the same post or sendMessage methods as before, 
but from your new thread. 

The given Runnable or Message will then be 
scheduled in the Handler's message queue and processed when appropriate.

参考
http://www.cnblogs.com/plokmju/p/android_handler.html